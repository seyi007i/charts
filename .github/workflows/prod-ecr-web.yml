name: Deploy nginx-ecr

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: demo
  APP_URL: http://13.220.255.193
  SECRET_NAME: /DEV/TEST_CORE_ENV
  APP_DIR: /opt/app
  IMAGE_NAME: demoapp

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      rollback: ${{ steps.healthz-check.outputs.rollback }}
      tag: ${{ steps.build-image.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        id: build-image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          TAG=prod-${GITHUB_SHA}
          docker build -t $IMAGE_URI:$TAG deploy/.
          docker push $IMAGE_URI:$TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Load secrets and save to app.env
        run: aws ssm get-parameter --with-decryption --name $SECRET_NAME --region ${{ env.AWS_REGION }} --query Parameter.Value | sed -e 's/^"//' -e 's/"$//' -e 's/\\n/\n/g' -e 's/\\//g' > .env
      
     # - name: Backup existing .env and replace with new  ${GITHUB_SHA}
        

      - name: Update image in docker-compose.yaml and restart container
        run: |
          sed -i "s,IMAGE_TAG,${{ needs.build-and-push.outputs.tag }}," deploy/docker-compose.yaml
                               
          docker compose -f deploy/docker-compose.yaml pull
          docker compose -f deploy/docker-compose.yaml up -d
        
      - name: Wait before health check
        run: sleep 60

      - name: Check /healthz endpoint
        id: healthz-check
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL)
          echo "HTTP status: $STATUS"
          if [ "$STATUS" = "200" ]; then
            echo "App is healthy"
            echo "rollback=false" >> $GITHUB_OUTPUT
          else
            echo "App is NOT healthy. Marking for rollback."
            echo "rollback=true" >> $GITHUB_OUTPUT

  rollback:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ needs.build-and-push.outputs.rollback == 'true' }}
    steps:
      - name: Restore old .env and restart app
        run: |
          sudo cp $APP_DIR/old_env $APP_DIR/.env
          sudo chmod 600 $APP_DIR/.env
          cd $APP_DIR
          docker compose down
          docker compose up -d

  